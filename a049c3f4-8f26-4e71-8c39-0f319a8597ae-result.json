{"name": "test_creat[params1]", "status": "broken", "statusDetails": {"message": "TypeError: a bytes-like object is required, not 'int'", "trace": "self = <api.department.Department object at 0x00000245CAFB0080>\nsteps = [{'method': 'tag.creat', 'params': '${params}'}, {'assertion': 0, 'path': '$..errcode'}]\n\n    def api_steps(self, steps: list):\n        for step in steps:\n            raw = yaml.dump(step)\n            for key, value in self.params.items():\n                raw = raw.replace(f'${{{key}}}', repr(value))\n            step = yaml.safe_load(raw)\n            if isinstance(step, dict):\n                if 'method' in step.keys():\n                    Get_log().log_info('正在测试'+ step['method'])\n                    allure.attach(step['method']+'测试')\n                    method = step['method'].split('.')[-1]\n                    getattr(self, method)(**step)\n                if \"path\" in step.keys():\n                    self.code = getattr(self, 'jsonpath')(**step)\n                if 'assertion' in step.keys():\n                    try:\n>                       assert self.code == step['assertion']\nE                       AssertionError\n\n..\\api\\baseapi.py:69: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <testcase.test_department.TestDepartment object at 0x00000245CAFB0400>\nparams = {'address': '广州市海珠区新港中路', 'alias': 'jackzfgfhang', 'avatar_mediaid': '2-G6nrLmr5EC3MNb_-zL1dDdzkd0p7cNliYu9V5w7o8K0', 'department': [1, 2], ...}\nkwargs = {}\n\n    @pytest.mark.parametrize('params',params)\n    def test_creat(self,params,**kwargs):\n        self.department.params['params'] = params\n>       self.department.api_steps(self.data)\n\ntest_department.py:163: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\api\\baseapi.py:72: in api_steps\n    allure.attach(self.code)\nD:\\python\\lib\\site-packages\\allure_commons\\_allure.py:179: in __call__\n    plugin_manager.hook.attach_data(body=body, name=name, attachment_type=attachment_type, extension=extension)\nD:\\python\\lib\\site-packages\\pluggy\\hooks.py:286: in __call__\n    return self._hookexec(self, self.get_hookimpls(), kwargs)\nD:\\python\\lib\\site-packages\\pluggy\\manager.py:93: in _hookexec\n    return self._inner_hookexec(hook, methods, kwargs)\nD:\\python\\lib\\site-packages\\pluggy\\manager.py:87: in <lambda>\n    firstresult=hook.spec.opts.get(\"firstresult\") if hook.spec else False,\nd:\\python\\lib\\site-packages\\allure_pytest\\listener.py:220: in attach_data\n    self.allure_logger.attach_data(uuid4(), body, name=name, attachment_type=attachment_type, extension=extension)\nD:\\python\\lib\\site-packages\\allure_commons\\reporter.py:117: in attach_data\n    plugin_manager.hook.report_attached_data(body=body, file_name=file_name)\nD:\\python\\lib\\site-packages\\pluggy\\hooks.py:286: in __call__\n    return self._hookexec(self, self.get_hookimpls(), kwargs)\nD:\\python\\lib\\site-packages\\pluggy\\manager.py:93: in _hookexec\n    return self._inner_hookexec(hook, methods, kwargs)\nD:\\python\\lib\\site-packages\\pluggy\\manager.py:87: in <lambda>\n    firstresult=hook.spec.opts.get(\"firstresult\") if hook.spec else False,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <allure_commons.logger.AllureFileLogger object at 0x00000245CA10E7F0>\nbody = 301015\nfile_name = 'd06f4f86-bc17-4f7d-9ea8-feafd42d9310-attachment.attach'\n\n    @hookimpl\n    def report_attached_data(self, body, file_name):\n        destination = os.path.join(self._report_dir, file_name)\n        with open(destination, 'wb') as attached_file:\n            if isinstance(body, text_type):\n                attached_file.write(body.encode('utf-8'))\n            else:\n>               attached_file.write(body)\nE               TypeError: a bytes-like object is required, not 'int'\n\nD:\\python\\lib\\site-packages\\allure_commons\\logger.py:62: TypeError"}, "attachments": [{"source": "4f447dc3-aea1-463c-9386-96ec81eb1a89-attachment.attach"}, {"source": "d06f4f86-bc17-4f7d-9ea8-feafd42d9310-attachment.attach"}, {"name": "log", "source": "620b6000-7ef1-4460-b01a-d063f706624f-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "params", "value": "{'userid': 'dfjb', 'name': 'dghfd', 'alias': 'jackzfgfhang', 'mobile': '+86 13800525010', 'department': [1, 2], 'order': [10, 40], 'position': '产品经理', 'gender': '1', 'email': 'zhangsan@gzdev.com', 'is_leader_in_dept': [1, 0], 'enable': 1, 'avatar_mediaid': '2-G6nrLmr5EC3MNb_-zL1dDdzkd0p7cNliYu9V5w7o8K0', 'telephone': '020-123456', 'address': '广州市海珠区新港中路', 'main_department': 1, 'extattr': {'attrs': [{'type': 0, 'name': '文本名称', 'text': {'value': '文本'}}, {'type': 1, 'name': '网页名称', 'web': {'url': 'http://www.test.com', 'title': '标题'}}]}, 'to_invite': 'true', 'external_position': '高级产品经理', 'external_profile': {'external_corp_name': '企业简称', 'wechat_channels': {'nickname': '视频号名称'}, 'external_attr': [{'type': 0, 'name': '文本名称', 'text': {'value': '文本'}}, {'type': 1, 'name': '网页名称', 'web': {'url': 'http://www.test.com', 'title': '标题'}}, {'type': 2, 'name': '测试app', 'miniprogram': {'appid': 'wx8bd8012614784fake', 'pagepath': '/index', 'title': 'my miniprogram'}}]}}"}], "start": 1634434486045, "stop": 1634434486946, "uuid": "05c458a1-9bce-4dc3-a861-19c80c30f0db", "historyId": "ac442d8902ddf9f54a60b834f69bcad7", "testCaseId": "308d0b0f532cdef2e63bd94db8941ce8", "fullName": "testcase.test_department.TestDepartment#test_creat", "labels": [{"name": "parentSuite", "value": "testcase"}, {"name": "suite", "value": "test_department"}, {"name": "subSuite", "value": "TestDepartment"}, {"name": "host", "value": "PC-202008151337"}, {"name": "thread", "value": "6832-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.test_department"}]}